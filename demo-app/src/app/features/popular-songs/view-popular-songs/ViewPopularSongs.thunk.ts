import { ActionReducerMapBuilder, createAsyncThunk } from "@reduxjs/toolkit";
import { ViewPopularSongsUseCase } from "./view-popular-Songs.usecase";
import { Future } from "../../../base/Future.ts";

//This thunk is generated by generate-thunks.ts , please do not modify it manually
export const ViewPopularSongsThunk = createAsyncThunk(
  "view-popular-Songs/ViewPopularSongs",
  async (arg: { input: { maxNumber: number } }, { rejectWithValue }) => {
    try {
      const usecase = container.get(ViewPopularSongsUseCase);
      return await usecase.execute(arg.input);
    } catch (err) {
      return rejectWithValue(err);
    }
  },
);

export const createViewPopularSongsThunkReducer = () => {
  const useCase = container.get(ViewPopularSongsUseCase);
  type stateType = ReturnType<typeof useCase.apply>;
  return (builder: ActionReducerMapBuilder<Future<stateType>>) => {
    builder
      .addCase(ViewPopularSongsThunk.pending, (state) => {
        state.IsPending = true;
        state.Error = null;
      })
      .addCase(ViewPopularSongsThunk.fulfilled, (state, action) => {
        state.IsPending = false;
        state.Value = useCase.apply(state.Value, action.payload);
      })
      .addCase(ViewPopularSongsThunk.rejected, (state, action) => {
        state.IsPending = false;
        state.Error = new Error(action.error?.message ?? "Unknown error");
      });
  };
};
